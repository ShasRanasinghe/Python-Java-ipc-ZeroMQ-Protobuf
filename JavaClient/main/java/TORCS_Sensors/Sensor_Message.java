// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_schema.proto

package TORCS_Sensors;

public final class Sensor_Message {
  private Sensor_Message() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface SensorsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:TORCS_Sensors.Sensors)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional float angle = 1;</code>
     */
    boolean hasAngle();
    /**
     * <code>optional float angle = 1;</code>
     */
    float getAngle();

    /**
     * <code>optional float currentLabTime = 2;</code>
     */
    boolean hasCurrentLabTime();
    /**
     * <code>optional float currentLabTime = 2;</code>
     */
    float getCurrentLabTime();

    /**
     * <code>optional float damage = 3;</code>
     */
    boolean hasDamage();
    /**
     * <code>optional float damage = 3;</code>
     */
    float getDamage();

    /**
     * <code>optional float distanceFromStart = 4;</code>
     */
    boolean hasDistanceFromStart();
    /**
     * <code>optional float distanceFromStart = 4;</code>
     */
    float getDistanceFromStart();

    /**
     * <code>optional float totalDistanceFromStart = 5;</code>
     */
    boolean hasTotalDistanceFromStart();
    /**
     * <code>optional float totalDistanceFromStart = 5;</code>
     */
    float getTotalDistanceFromStart();

    /**
     * <code>optional float distanceRaced = 6;</code>
     */
    boolean hasDistanceRaced();
    /**
     * <code>optional float distanceRaced = 6;</code>
     */
    float getDistanceRaced();

    /**
     * <code>optional float fuel = 7;</code>
     */
    boolean hasFuel();
    /**
     * <code>optional float fuel = 7;</code>
     */
    float getFuel();

    /**
     * <code>optional float gear = 8;</code>
     */
    boolean hasGear();
    /**
     * <code>optional float gear = 8;</code>
     */
    float getGear();

    /**
     * <code>optional float lastLapTime = 9;</code>
     */
    boolean hasLastLapTime();
    /**
     * <code>optional float lastLapTime = 9;</code>
     */
    float getLastLapTime();

    /**
     * <code>optional float opponents = 10;</code>
     */
    boolean hasOpponents();
    /**
     * <code>optional float opponents = 10;</code>
     */
    float getOpponents();

    /**
     * <code>optional float racePos = 11;</code>
     */
    boolean hasRacePos();
    /**
     * <code>optional float racePos = 11;</code>
     */
    float getRacePos();

    /**
     * <code>optional float rpm = 12;</code>
     */
    boolean hasRpm();
    /**
     * <code>optional float rpm = 12;</code>
     */
    float getRpm();

    /**
     * <code>optional float speedX = 13;</code>
     */
    boolean hasSpeedX();
    /**
     * <code>optional float speedX = 13;</code>
     */
    float getSpeedX();

    /**
     * <code>optional float speedY = 14;</code>
     */
    boolean hasSpeedY();
    /**
     * <code>optional float speedY = 14;</code>
     */
    float getSpeedY();

    /**
     * <code>optional float speedZ = 15;</code>
     */
    boolean hasSpeedZ();
    /**
     * <code>optional float speedZ = 15;</code>
     */
    float getSpeedZ();

    /**
     * <code>optional float track = 16;</code>
     */
    boolean hasTrack();
    /**
     * <code>optional float track = 16;</code>
     */
    float getTrack();

    /**
     * <code>optional float trackPosition = 17;</code>
     */
    boolean hasTrackPosition();
    /**
     * <code>optional float trackPosition = 17;</code>
     */
    float getTrackPosition();

    /**
     * <code>optional float wheelSpinVelocity = 18;</code>
     */
    boolean hasWheelSpinVelocity();
    /**
     * <code>optional float wheelSpinVelocity = 18;</code>
     */
    float getWheelSpinVelocity();

    /**
     * <code>optional float z = 19;</code>
     */
    boolean hasZ();
    /**
     * <code>optional float z = 19;</code>
     */
    float getZ();

    /**
     * <code>optional float focus = 20;</code>
     */
    boolean hasFocus();
    /**
     * <code>optional float focus = 20;</code>
     */
    float getFocus();
  }
  /**
   * Protobuf type {@code TORCS_Sensors.Sensors}
   */
  public  static final class Sensors extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:TORCS_Sensors.Sensors)
      SensorsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Sensors.newBuilder() to construct.
    private Sensors(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Sensors() {
      angle_ = 0F;
      currentLabTime_ = 0F;
      damage_ = 0F;
      distanceFromStart_ = 0F;
      totalDistanceFromStart_ = 0F;
      distanceRaced_ = 0F;
      fuel_ = 0F;
      gear_ = 0F;
      lastLapTime_ = 0F;
      opponents_ = 0F;
      racePos_ = 0F;
      rpm_ = 0F;
      speedX_ = 0F;
      speedY_ = 0F;
      speedZ_ = 0F;
      track_ = 0F;
      trackPosition_ = 0F;
      wheelSpinVelocity_ = 0F;
      z_ = 0F;
      focus_ = 0F;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Sensors(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 13: {
              bitField0_ |= 0x00000001;
              angle_ = input.readFloat();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              currentLabTime_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              damage_ = input.readFloat();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              distanceFromStart_ = input.readFloat();
              break;
            }
            case 45: {
              bitField0_ |= 0x00000010;
              totalDistanceFromStart_ = input.readFloat();
              break;
            }
            case 53: {
              bitField0_ |= 0x00000020;
              distanceRaced_ = input.readFloat();
              break;
            }
            case 61: {
              bitField0_ |= 0x00000040;
              fuel_ = input.readFloat();
              break;
            }
            case 69: {
              bitField0_ |= 0x00000080;
              gear_ = input.readFloat();
              break;
            }
            case 77: {
              bitField0_ |= 0x00000100;
              lastLapTime_ = input.readFloat();
              break;
            }
            case 85: {
              bitField0_ |= 0x00000200;
              opponents_ = input.readFloat();
              break;
            }
            case 93: {
              bitField0_ |= 0x00000400;
              racePos_ = input.readFloat();
              break;
            }
            case 101: {
              bitField0_ |= 0x00000800;
              rpm_ = input.readFloat();
              break;
            }
            case 109: {
              bitField0_ |= 0x00001000;
              speedX_ = input.readFloat();
              break;
            }
            case 117: {
              bitField0_ |= 0x00002000;
              speedY_ = input.readFloat();
              break;
            }
            case 125: {
              bitField0_ |= 0x00004000;
              speedZ_ = input.readFloat();
              break;
            }
            case 133: {
              bitField0_ |= 0x00008000;
              track_ = input.readFloat();
              break;
            }
            case 141: {
              bitField0_ |= 0x00010000;
              trackPosition_ = input.readFloat();
              break;
            }
            case 149: {
              bitField0_ |= 0x00020000;
              wheelSpinVelocity_ = input.readFloat();
              break;
            }
            case 157: {
              bitField0_ |= 0x00040000;
              z_ = input.readFloat();
              break;
            }
            case 165: {
              bitField0_ |= 0x00080000;
              focus_ = input.readFloat();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return TORCS_Sensors.Sensor_Message.internal_static_TORCS_Sensors_Sensors_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return TORCS_Sensors.Sensor_Message.internal_static_TORCS_Sensors_Sensors_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              TORCS_Sensors.Sensor_Message.Sensors.class, TORCS_Sensors.Sensor_Message.Sensors.Builder.class);
    }

    private int bitField0_;
    public static final int ANGLE_FIELD_NUMBER = 1;
    private float angle_;
    /**
     * <code>optional float angle = 1;</code>
     */
    public boolean hasAngle() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional float angle = 1;</code>
     */
    public float getAngle() {
      return angle_;
    }

    public static final int CURRENTLABTIME_FIELD_NUMBER = 2;
    private float currentLabTime_;
    /**
     * <code>optional float currentLabTime = 2;</code>
     */
    public boolean hasCurrentLabTime() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float currentLabTime = 2;</code>
     */
    public float getCurrentLabTime() {
      return currentLabTime_;
    }

    public static final int DAMAGE_FIELD_NUMBER = 3;
    private float damage_;
    /**
     * <code>optional float damage = 3;</code>
     */
    public boolean hasDamage() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float damage = 3;</code>
     */
    public float getDamage() {
      return damage_;
    }

    public static final int DISTANCEFROMSTART_FIELD_NUMBER = 4;
    private float distanceFromStart_;
    /**
     * <code>optional float distanceFromStart = 4;</code>
     */
    public boolean hasDistanceFromStart() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional float distanceFromStart = 4;</code>
     */
    public float getDistanceFromStart() {
      return distanceFromStart_;
    }

    public static final int TOTALDISTANCEFROMSTART_FIELD_NUMBER = 5;
    private float totalDistanceFromStart_;
    /**
     * <code>optional float totalDistanceFromStart = 5;</code>
     */
    public boolean hasTotalDistanceFromStart() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional float totalDistanceFromStart = 5;</code>
     */
    public float getTotalDistanceFromStart() {
      return totalDistanceFromStart_;
    }

    public static final int DISTANCERACED_FIELD_NUMBER = 6;
    private float distanceRaced_;
    /**
     * <code>optional float distanceRaced = 6;</code>
     */
    public boolean hasDistanceRaced() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional float distanceRaced = 6;</code>
     */
    public float getDistanceRaced() {
      return distanceRaced_;
    }

    public static final int FUEL_FIELD_NUMBER = 7;
    private float fuel_;
    /**
     * <code>optional float fuel = 7;</code>
     */
    public boolean hasFuel() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional float fuel = 7;</code>
     */
    public float getFuel() {
      return fuel_;
    }

    public static final int GEAR_FIELD_NUMBER = 8;
    private float gear_;
    /**
     * <code>optional float gear = 8;</code>
     */
    public boolean hasGear() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional float gear = 8;</code>
     */
    public float getGear() {
      return gear_;
    }

    public static final int LASTLAPTIME_FIELD_NUMBER = 9;
    private float lastLapTime_;
    /**
     * <code>optional float lastLapTime = 9;</code>
     */
    public boolean hasLastLapTime() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional float lastLapTime = 9;</code>
     */
    public float getLastLapTime() {
      return lastLapTime_;
    }

    public static final int OPPONENTS_FIELD_NUMBER = 10;
    private float opponents_;
    /**
     * <code>optional float opponents = 10;</code>
     */
    public boolean hasOpponents() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional float opponents = 10;</code>
     */
    public float getOpponents() {
      return opponents_;
    }

    public static final int RACEPOS_FIELD_NUMBER = 11;
    private float racePos_;
    /**
     * <code>optional float racePos = 11;</code>
     */
    public boolean hasRacePos() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional float racePos = 11;</code>
     */
    public float getRacePos() {
      return racePos_;
    }

    public static final int RPM_FIELD_NUMBER = 12;
    private float rpm_;
    /**
     * <code>optional float rpm = 12;</code>
     */
    public boolean hasRpm() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional float rpm = 12;</code>
     */
    public float getRpm() {
      return rpm_;
    }

    public static final int SPEEDX_FIELD_NUMBER = 13;
    private float speedX_;
    /**
     * <code>optional float speedX = 13;</code>
     */
    public boolean hasSpeedX() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional float speedX = 13;</code>
     */
    public float getSpeedX() {
      return speedX_;
    }

    public static final int SPEEDY_FIELD_NUMBER = 14;
    private float speedY_;
    /**
     * <code>optional float speedY = 14;</code>
     */
    public boolean hasSpeedY() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional float speedY = 14;</code>
     */
    public float getSpeedY() {
      return speedY_;
    }

    public static final int SPEEDZ_FIELD_NUMBER = 15;
    private float speedZ_;
    /**
     * <code>optional float speedZ = 15;</code>
     */
    public boolean hasSpeedZ() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional float speedZ = 15;</code>
     */
    public float getSpeedZ() {
      return speedZ_;
    }

    public static final int TRACK_FIELD_NUMBER = 16;
    private float track_;
    /**
     * <code>optional float track = 16;</code>
     */
    public boolean hasTrack() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional float track = 16;</code>
     */
    public float getTrack() {
      return track_;
    }

    public static final int TRACKPOSITION_FIELD_NUMBER = 17;
    private float trackPosition_;
    /**
     * <code>optional float trackPosition = 17;</code>
     */
    public boolean hasTrackPosition() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional float trackPosition = 17;</code>
     */
    public float getTrackPosition() {
      return trackPosition_;
    }

    public static final int WHEELSPINVELOCITY_FIELD_NUMBER = 18;
    private float wheelSpinVelocity_;
    /**
     * <code>optional float wheelSpinVelocity = 18;</code>
     */
    public boolean hasWheelSpinVelocity() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional float wheelSpinVelocity = 18;</code>
     */
    public float getWheelSpinVelocity() {
      return wheelSpinVelocity_;
    }

    public static final int Z_FIELD_NUMBER = 19;
    private float z_;
    /**
     * <code>optional float z = 19;</code>
     */
    public boolean hasZ() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional float z = 19;</code>
     */
    public float getZ() {
      return z_;
    }

    public static final int FOCUS_FIELD_NUMBER = 20;
    private float focus_;
    /**
     * <code>optional float focus = 20;</code>
     */
    public boolean hasFocus() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional float focus = 20;</code>
     */
    public float getFocus() {
      return focus_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, angle_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, currentLabTime_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, damage_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(4, distanceFromStart_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(5, totalDistanceFromStart_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(6, distanceRaced_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeFloat(7, fuel_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeFloat(8, gear_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeFloat(9, lastLapTime_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeFloat(10, opponents_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeFloat(11, racePos_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeFloat(12, rpm_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeFloat(13, speedX_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeFloat(14, speedY_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeFloat(15, speedZ_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeFloat(16, track_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeFloat(17, trackPosition_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeFloat(18, wheelSpinVelocity_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeFloat(19, z_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeFloat(20, focus_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, angle_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, currentLabTime_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, damage_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, distanceFromStart_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, totalDistanceFromStart_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, distanceRaced_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(7, fuel_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(8, gear_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(9, lastLapTime_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(10, opponents_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(11, racePos_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(12, rpm_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(13, speedX_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(14, speedY_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(15, speedZ_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(16, track_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(17, trackPosition_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(18, wheelSpinVelocity_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(19, z_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(20, focus_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof TORCS_Sensors.Sensor_Message.Sensors)) {
        return super.equals(obj);
      }
      TORCS_Sensors.Sensor_Message.Sensors other = (TORCS_Sensors.Sensor_Message.Sensors) obj;

      boolean result = true;
      result = result && (hasAngle() == other.hasAngle());
      if (hasAngle()) {
        result = result && (
            java.lang.Float.floatToIntBits(getAngle())
            == java.lang.Float.floatToIntBits(
                other.getAngle()));
      }
      result = result && (hasCurrentLabTime() == other.hasCurrentLabTime());
      if (hasCurrentLabTime()) {
        result = result && (
            java.lang.Float.floatToIntBits(getCurrentLabTime())
            == java.lang.Float.floatToIntBits(
                other.getCurrentLabTime()));
      }
      result = result && (hasDamage() == other.hasDamage());
      if (hasDamage()) {
        result = result && (
            java.lang.Float.floatToIntBits(getDamage())
            == java.lang.Float.floatToIntBits(
                other.getDamage()));
      }
      result = result && (hasDistanceFromStart() == other.hasDistanceFromStart());
      if (hasDistanceFromStart()) {
        result = result && (
            java.lang.Float.floatToIntBits(getDistanceFromStart())
            == java.lang.Float.floatToIntBits(
                other.getDistanceFromStart()));
      }
      result = result && (hasTotalDistanceFromStart() == other.hasTotalDistanceFromStart());
      if (hasTotalDistanceFromStart()) {
        result = result && (
            java.lang.Float.floatToIntBits(getTotalDistanceFromStart())
            == java.lang.Float.floatToIntBits(
                other.getTotalDistanceFromStart()));
      }
      result = result && (hasDistanceRaced() == other.hasDistanceRaced());
      if (hasDistanceRaced()) {
        result = result && (
            java.lang.Float.floatToIntBits(getDistanceRaced())
            == java.lang.Float.floatToIntBits(
                other.getDistanceRaced()));
      }
      result = result && (hasFuel() == other.hasFuel());
      if (hasFuel()) {
        result = result && (
            java.lang.Float.floatToIntBits(getFuel())
            == java.lang.Float.floatToIntBits(
                other.getFuel()));
      }
      result = result && (hasGear() == other.hasGear());
      if (hasGear()) {
        result = result && (
            java.lang.Float.floatToIntBits(getGear())
            == java.lang.Float.floatToIntBits(
                other.getGear()));
      }
      result = result && (hasLastLapTime() == other.hasLastLapTime());
      if (hasLastLapTime()) {
        result = result && (
            java.lang.Float.floatToIntBits(getLastLapTime())
            == java.lang.Float.floatToIntBits(
                other.getLastLapTime()));
      }
      result = result && (hasOpponents() == other.hasOpponents());
      if (hasOpponents()) {
        result = result && (
            java.lang.Float.floatToIntBits(getOpponents())
            == java.lang.Float.floatToIntBits(
                other.getOpponents()));
      }
      result = result && (hasRacePos() == other.hasRacePos());
      if (hasRacePos()) {
        result = result && (
            java.lang.Float.floatToIntBits(getRacePos())
            == java.lang.Float.floatToIntBits(
                other.getRacePos()));
      }
      result = result && (hasRpm() == other.hasRpm());
      if (hasRpm()) {
        result = result && (
            java.lang.Float.floatToIntBits(getRpm())
            == java.lang.Float.floatToIntBits(
                other.getRpm()));
      }
      result = result && (hasSpeedX() == other.hasSpeedX());
      if (hasSpeedX()) {
        result = result && (
            java.lang.Float.floatToIntBits(getSpeedX())
            == java.lang.Float.floatToIntBits(
                other.getSpeedX()));
      }
      result = result && (hasSpeedY() == other.hasSpeedY());
      if (hasSpeedY()) {
        result = result && (
            java.lang.Float.floatToIntBits(getSpeedY())
            == java.lang.Float.floatToIntBits(
                other.getSpeedY()));
      }
      result = result && (hasSpeedZ() == other.hasSpeedZ());
      if (hasSpeedZ()) {
        result = result && (
            java.lang.Float.floatToIntBits(getSpeedZ())
            == java.lang.Float.floatToIntBits(
                other.getSpeedZ()));
      }
      result = result && (hasTrack() == other.hasTrack());
      if (hasTrack()) {
        result = result && (
            java.lang.Float.floatToIntBits(getTrack())
            == java.lang.Float.floatToIntBits(
                other.getTrack()));
      }
      result = result && (hasTrackPosition() == other.hasTrackPosition());
      if (hasTrackPosition()) {
        result = result && (
            java.lang.Float.floatToIntBits(getTrackPosition())
            == java.lang.Float.floatToIntBits(
                other.getTrackPosition()));
      }
      result = result && (hasWheelSpinVelocity() == other.hasWheelSpinVelocity());
      if (hasWheelSpinVelocity()) {
        result = result && (
            java.lang.Float.floatToIntBits(getWheelSpinVelocity())
            == java.lang.Float.floatToIntBits(
                other.getWheelSpinVelocity()));
      }
      result = result && (hasZ() == other.hasZ());
      if (hasZ()) {
        result = result && (
            java.lang.Float.floatToIntBits(getZ())
            == java.lang.Float.floatToIntBits(
                other.getZ()));
      }
      result = result && (hasFocus() == other.hasFocus());
      if (hasFocus()) {
        result = result && (
            java.lang.Float.floatToIntBits(getFocus())
            == java.lang.Float.floatToIntBits(
                other.getFocus()));
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasAngle()) {
        hash = (37 * hash) + ANGLE_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getAngle());
      }
      if (hasCurrentLabTime()) {
        hash = (37 * hash) + CURRENTLABTIME_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getCurrentLabTime());
      }
      if (hasDamage()) {
        hash = (37 * hash) + DAMAGE_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getDamage());
      }
      if (hasDistanceFromStart()) {
        hash = (37 * hash) + DISTANCEFROMSTART_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getDistanceFromStart());
      }
      if (hasTotalDistanceFromStart()) {
        hash = (37 * hash) + TOTALDISTANCEFROMSTART_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getTotalDistanceFromStart());
      }
      if (hasDistanceRaced()) {
        hash = (37 * hash) + DISTANCERACED_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getDistanceRaced());
      }
      if (hasFuel()) {
        hash = (37 * hash) + FUEL_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getFuel());
      }
      if (hasGear()) {
        hash = (37 * hash) + GEAR_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getGear());
      }
      if (hasLastLapTime()) {
        hash = (37 * hash) + LASTLAPTIME_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getLastLapTime());
      }
      if (hasOpponents()) {
        hash = (37 * hash) + OPPONENTS_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getOpponents());
      }
      if (hasRacePos()) {
        hash = (37 * hash) + RACEPOS_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getRacePos());
      }
      if (hasRpm()) {
        hash = (37 * hash) + RPM_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getRpm());
      }
      if (hasSpeedX()) {
        hash = (37 * hash) + SPEEDX_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getSpeedX());
      }
      if (hasSpeedY()) {
        hash = (37 * hash) + SPEEDY_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getSpeedY());
      }
      if (hasSpeedZ()) {
        hash = (37 * hash) + SPEEDZ_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getSpeedZ());
      }
      if (hasTrack()) {
        hash = (37 * hash) + TRACK_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getTrack());
      }
      if (hasTrackPosition()) {
        hash = (37 * hash) + TRACKPOSITION_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getTrackPosition());
      }
      if (hasWheelSpinVelocity()) {
        hash = (37 * hash) + WHEELSPINVELOCITY_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getWheelSpinVelocity());
      }
      if (hasZ()) {
        hash = (37 * hash) + Z_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getZ());
      }
      if (hasFocus()) {
        hash = (37 * hash) + FOCUS_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getFocus());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static TORCS_Sensors.Sensor_Message.Sensors parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static TORCS_Sensors.Sensor_Message.Sensors parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static TORCS_Sensors.Sensor_Message.Sensors parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static TORCS_Sensors.Sensor_Message.Sensors parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static TORCS_Sensors.Sensor_Message.Sensors parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static TORCS_Sensors.Sensor_Message.Sensors parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static TORCS_Sensors.Sensor_Message.Sensors parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static TORCS_Sensors.Sensor_Message.Sensors parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static TORCS_Sensors.Sensor_Message.Sensors parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static TORCS_Sensors.Sensor_Message.Sensors parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static TORCS_Sensors.Sensor_Message.Sensors parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static TORCS_Sensors.Sensor_Message.Sensors parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(TORCS_Sensors.Sensor_Message.Sensors prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code TORCS_Sensors.Sensors}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:TORCS_Sensors.Sensors)
        TORCS_Sensors.Sensor_Message.SensorsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return TORCS_Sensors.Sensor_Message.internal_static_TORCS_Sensors_Sensors_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return TORCS_Sensors.Sensor_Message.internal_static_TORCS_Sensors_Sensors_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                TORCS_Sensors.Sensor_Message.Sensors.class, TORCS_Sensors.Sensor_Message.Sensors.Builder.class);
      }

      // Construct using TORCS_Sensors.Sensor_Message.Sensors.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        angle_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000001);
        currentLabTime_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        damage_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        distanceFromStart_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000008);
        totalDistanceFromStart_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000010);
        distanceRaced_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000020);
        fuel_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000040);
        gear_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000080);
        lastLapTime_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000100);
        opponents_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000200);
        racePos_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000400);
        rpm_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000800);
        speedX_ = 0F;
        bitField0_ = (bitField0_ & ~0x00001000);
        speedY_ = 0F;
        bitField0_ = (bitField0_ & ~0x00002000);
        speedZ_ = 0F;
        bitField0_ = (bitField0_ & ~0x00004000);
        track_ = 0F;
        bitField0_ = (bitField0_ & ~0x00008000);
        trackPosition_ = 0F;
        bitField0_ = (bitField0_ & ~0x00010000);
        wheelSpinVelocity_ = 0F;
        bitField0_ = (bitField0_ & ~0x00020000);
        z_ = 0F;
        bitField0_ = (bitField0_ & ~0x00040000);
        focus_ = 0F;
        bitField0_ = (bitField0_ & ~0x00080000);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return TORCS_Sensors.Sensor_Message.internal_static_TORCS_Sensors_Sensors_descriptor;
      }

      @java.lang.Override
      public TORCS_Sensors.Sensor_Message.Sensors getDefaultInstanceForType() {
        return TORCS_Sensors.Sensor_Message.Sensors.getDefaultInstance();
      }

      @java.lang.Override
      public TORCS_Sensors.Sensor_Message.Sensors build() {
        TORCS_Sensors.Sensor_Message.Sensors result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public TORCS_Sensors.Sensor_Message.Sensors buildPartial() {
        TORCS_Sensors.Sensor_Message.Sensors result = new TORCS_Sensors.Sensor_Message.Sensors(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.angle_ = angle_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.currentLabTime_ = currentLabTime_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.damage_ = damage_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.distanceFromStart_ = distanceFromStart_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.totalDistanceFromStart_ = totalDistanceFromStart_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.distanceRaced_ = distanceRaced_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.fuel_ = fuel_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.gear_ = gear_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.lastLapTime_ = lastLapTime_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.opponents_ = opponents_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.racePos_ = racePos_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.rpm_ = rpm_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.speedX_ = speedX_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.speedY_ = speedY_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.speedZ_ = speedZ_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.track_ = track_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.trackPosition_ = trackPosition_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.wheelSpinVelocity_ = wheelSpinVelocity_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.z_ = z_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.focus_ = focus_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof TORCS_Sensors.Sensor_Message.Sensors) {
          return mergeFrom((TORCS_Sensors.Sensor_Message.Sensors)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(TORCS_Sensors.Sensor_Message.Sensors other) {
        if (other == TORCS_Sensors.Sensor_Message.Sensors.getDefaultInstance()) return this;
        if (other.hasAngle()) {
          setAngle(other.getAngle());
        }
        if (other.hasCurrentLabTime()) {
          setCurrentLabTime(other.getCurrentLabTime());
        }
        if (other.hasDamage()) {
          setDamage(other.getDamage());
        }
        if (other.hasDistanceFromStart()) {
          setDistanceFromStart(other.getDistanceFromStart());
        }
        if (other.hasTotalDistanceFromStart()) {
          setTotalDistanceFromStart(other.getTotalDistanceFromStart());
        }
        if (other.hasDistanceRaced()) {
          setDistanceRaced(other.getDistanceRaced());
        }
        if (other.hasFuel()) {
          setFuel(other.getFuel());
        }
        if (other.hasGear()) {
          setGear(other.getGear());
        }
        if (other.hasLastLapTime()) {
          setLastLapTime(other.getLastLapTime());
        }
        if (other.hasOpponents()) {
          setOpponents(other.getOpponents());
        }
        if (other.hasRacePos()) {
          setRacePos(other.getRacePos());
        }
        if (other.hasRpm()) {
          setRpm(other.getRpm());
        }
        if (other.hasSpeedX()) {
          setSpeedX(other.getSpeedX());
        }
        if (other.hasSpeedY()) {
          setSpeedY(other.getSpeedY());
        }
        if (other.hasSpeedZ()) {
          setSpeedZ(other.getSpeedZ());
        }
        if (other.hasTrack()) {
          setTrack(other.getTrack());
        }
        if (other.hasTrackPosition()) {
          setTrackPosition(other.getTrackPosition());
        }
        if (other.hasWheelSpinVelocity()) {
          setWheelSpinVelocity(other.getWheelSpinVelocity());
        }
        if (other.hasZ()) {
          setZ(other.getZ());
        }
        if (other.hasFocus()) {
          setFocus(other.getFocus());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        TORCS_Sensors.Sensor_Message.Sensors parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (TORCS_Sensors.Sensor_Message.Sensors) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private float angle_ ;
      /**
       * <code>optional float angle = 1;</code>
       */
      public boolean hasAngle() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional float angle = 1;</code>
       */
      public float getAngle() {
        return angle_;
      }
      /**
       * <code>optional float angle = 1;</code>
       */
      public Builder setAngle(float value) {
        bitField0_ |= 0x00000001;
        angle_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float angle = 1;</code>
       */
      public Builder clearAngle() {
        bitField0_ = (bitField0_ & ~0x00000001);
        angle_ = 0F;
        onChanged();
        return this;
      }

      private float currentLabTime_ ;
      /**
       * <code>optional float currentLabTime = 2;</code>
       */
      public boolean hasCurrentLabTime() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float currentLabTime = 2;</code>
       */
      public float getCurrentLabTime() {
        return currentLabTime_;
      }
      /**
       * <code>optional float currentLabTime = 2;</code>
       */
      public Builder setCurrentLabTime(float value) {
        bitField0_ |= 0x00000002;
        currentLabTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float currentLabTime = 2;</code>
       */
      public Builder clearCurrentLabTime() {
        bitField0_ = (bitField0_ & ~0x00000002);
        currentLabTime_ = 0F;
        onChanged();
        return this;
      }

      private float damage_ ;
      /**
       * <code>optional float damage = 3;</code>
       */
      public boolean hasDamage() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float damage = 3;</code>
       */
      public float getDamage() {
        return damage_;
      }
      /**
       * <code>optional float damage = 3;</code>
       */
      public Builder setDamage(float value) {
        bitField0_ |= 0x00000004;
        damage_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float damage = 3;</code>
       */
      public Builder clearDamage() {
        bitField0_ = (bitField0_ & ~0x00000004);
        damage_ = 0F;
        onChanged();
        return this;
      }

      private float distanceFromStart_ ;
      /**
       * <code>optional float distanceFromStart = 4;</code>
       */
      public boolean hasDistanceFromStart() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional float distanceFromStart = 4;</code>
       */
      public float getDistanceFromStart() {
        return distanceFromStart_;
      }
      /**
       * <code>optional float distanceFromStart = 4;</code>
       */
      public Builder setDistanceFromStart(float value) {
        bitField0_ |= 0x00000008;
        distanceFromStart_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float distanceFromStart = 4;</code>
       */
      public Builder clearDistanceFromStart() {
        bitField0_ = (bitField0_ & ~0x00000008);
        distanceFromStart_ = 0F;
        onChanged();
        return this;
      }

      private float totalDistanceFromStart_ ;
      /**
       * <code>optional float totalDistanceFromStart = 5;</code>
       */
      public boolean hasTotalDistanceFromStart() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional float totalDistanceFromStart = 5;</code>
       */
      public float getTotalDistanceFromStart() {
        return totalDistanceFromStart_;
      }
      /**
       * <code>optional float totalDistanceFromStart = 5;</code>
       */
      public Builder setTotalDistanceFromStart(float value) {
        bitField0_ |= 0x00000010;
        totalDistanceFromStart_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float totalDistanceFromStart = 5;</code>
       */
      public Builder clearTotalDistanceFromStart() {
        bitField0_ = (bitField0_ & ~0x00000010);
        totalDistanceFromStart_ = 0F;
        onChanged();
        return this;
      }

      private float distanceRaced_ ;
      /**
       * <code>optional float distanceRaced = 6;</code>
       */
      public boolean hasDistanceRaced() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional float distanceRaced = 6;</code>
       */
      public float getDistanceRaced() {
        return distanceRaced_;
      }
      /**
       * <code>optional float distanceRaced = 6;</code>
       */
      public Builder setDistanceRaced(float value) {
        bitField0_ |= 0x00000020;
        distanceRaced_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float distanceRaced = 6;</code>
       */
      public Builder clearDistanceRaced() {
        bitField0_ = (bitField0_ & ~0x00000020);
        distanceRaced_ = 0F;
        onChanged();
        return this;
      }

      private float fuel_ ;
      /**
       * <code>optional float fuel = 7;</code>
       */
      public boolean hasFuel() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional float fuel = 7;</code>
       */
      public float getFuel() {
        return fuel_;
      }
      /**
       * <code>optional float fuel = 7;</code>
       */
      public Builder setFuel(float value) {
        bitField0_ |= 0x00000040;
        fuel_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float fuel = 7;</code>
       */
      public Builder clearFuel() {
        bitField0_ = (bitField0_ & ~0x00000040);
        fuel_ = 0F;
        onChanged();
        return this;
      }

      private float gear_ ;
      /**
       * <code>optional float gear = 8;</code>
       */
      public boolean hasGear() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional float gear = 8;</code>
       */
      public float getGear() {
        return gear_;
      }
      /**
       * <code>optional float gear = 8;</code>
       */
      public Builder setGear(float value) {
        bitField0_ |= 0x00000080;
        gear_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float gear = 8;</code>
       */
      public Builder clearGear() {
        bitField0_ = (bitField0_ & ~0x00000080);
        gear_ = 0F;
        onChanged();
        return this;
      }

      private float lastLapTime_ ;
      /**
       * <code>optional float lastLapTime = 9;</code>
       */
      public boolean hasLastLapTime() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional float lastLapTime = 9;</code>
       */
      public float getLastLapTime() {
        return lastLapTime_;
      }
      /**
       * <code>optional float lastLapTime = 9;</code>
       */
      public Builder setLastLapTime(float value) {
        bitField0_ |= 0x00000100;
        lastLapTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float lastLapTime = 9;</code>
       */
      public Builder clearLastLapTime() {
        bitField0_ = (bitField0_ & ~0x00000100);
        lastLapTime_ = 0F;
        onChanged();
        return this;
      }

      private float opponents_ ;
      /**
       * <code>optional float opponents = 10;</code>
       */
      public boolean hasOpponents() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional float opponents = 10;</code>
       */
      public float getOpponents() {
        return opponents_;
      }
      /**
       * <code>optional float opponents = 10;</code>
       */
      public Builder setOpponents(float value) {
        bitField0_ |= 0x00000200;
        opponents_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float opponents = 10;</code>
       */
      public Builder clearOpponents() {
        bitField0_ = (bitField0_ & ~0x00000200);
        opponents_ = 0F;
        onChanged();
        return this;
      }

      private float racePos_ ;
      /**
       * <code>optional float racePos = 11;</code>
       */
      public boolean hasRacePos() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional float racePos = 11;</code>
       */
      public float getRacePos() {
        return racePos_;
      }
      /**
       * <code>optional float racePos = 11;</code>
       */
      public Builder setRacePos(float value) {
        bitField0_ |= 0x00000400;
        racePos_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float racePos = 11;</code>
       */
      public Builder clearRacePos() {
        bitField0_ = (bitField0_ & ~0x00000400);
        racePos_ = 0F;
        onChanged();
        return this;
      }

      private float rpm_ ;
      /**
       * <code>optional float rpm = 12;</code>
       */
      public boolean hasRpm() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional float rpm = 12;</code>
       */
      public float getRpm() {
        return rpm_;
      }
      /**
       * <code>optional float rpm = 12;</code>
       */
      public Builder setRpm(float value) {
        bitField0_ |= 0x00000800;
        rpm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float rpm = 12;</code>
       */
      public Builder clearRpm() {
        bitField0_ = (bitField0_ & ~0x00000800);
        rpm_ = 0F;
        onChanged();
        return this;
      }

      private float speedX_ ;
      /**
       * <code>optional float speedX = 13;</code>
       */
      public boolean hasSpeedX() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional float speedX = 13;</code>
       */
      public float getSpeedX() {
        return speedX_;
      }
      /**
       * <code>optional float speedX = 13;</code>
       */
      public Builder setSpeedX(float value) {
        bitField0_ |= 0x00001000;
        speedX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float speedX = 13;</code>
       */
      public Builder clearSpeedX() {
        bitField0_ = (bitField0_ & ~0x00001000);
        speedX_ = 0F;
        onChanged();
        return this;
      }

      private float speedY_ ;
      /**
       * <code>optional float speedY = 14;</code>
       */
      public boolean hasSpeedY() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional float speedY = 14;</code>
       */
      public float getSpeedY() {
        return speedY_;
      }
      /**
       * <code>optional float speedY = 14;</code>
       */
      public Builder setSpeedY(float value) {
        bitField0_ |= 0x00002000;
        speedY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float speedY = 14;</code>
       */
      public Builder clearSpeedY() {
        bitField0_ = (bitField0_ & ~0x00002000);
        speedY_ = 0F;
        onChanged();
        return this;
      }

      private float speedZ_ ;
      /**
       * <code>optional float speedZ = 15;</code>
       */
      public boolean hasSpeedZ() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional float speedZ = 15;</code>
       */
      public float getSpeedZ() {
        return speedZ_;
      }
      /**
       * <code>optional float speedZ = 15;</code>
       */
      public Builder setSpeedZ(float value) {
        bitField0_ |= 0x00004000;
        speedZ_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float speedZ = 15;</code>
       */
      public Builder clearSpeedZ() {
        bitField0_ = (bitField0_ & ~0x00004000);
        speedZ_ = 0F;
        onChanged();
        return this;
      }

      private float track_ ;
      /**
       * <code>optional float track = 16;</code>
       */
      public boolean hasTrack() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional float track = 16;</code>
       */
      public float getTrack() {
        return track_;
      }
      /**
       * <code>optional float track = 16;</code>
       */
      public Builder setTrack(float value) {
        bitField0_ |= 0x00008000;
        track_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float track = 16;</code>
       */
      public Builder clearTrack() {
        bitField0_ = (bitField0_ & ~0x00008000);
        track_ = 0F;
        onChanged();
        return this;
      }

      private float trackPosition_ ;
      /**
       * <code>optional float trackPosition = 17;</code>
       */
      public boolean hasTrackPosition() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional float trackPosition = 17;</code>
       */
      public float getTrackPosition() {
        return trackPosition_;
      }
      /**
       * <code>optional float trackPosition = 17;</code>
       */
      public Builder setTrackPosition(float value) {
        bitField0_ |= 0x00010000;
        trackPosition_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float trackPosition = 17;</code>
       */
      public Builder clearTrackPosition() {
        bitField0_ = (bitField0_ & ~0x00010000);
        trackPosition_ = 0F;
        onChanged();
        return this;
      }

      private float wheelSpinVelocity_ ;
      /**
       * <code>optional float wheelSpinVelocity = 18;</code>
       */
      public boolean hasWheelSpinVelocity() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional float wheelSpinVelocity = 18;</code>
       */
      public float getWheelSpinVelocity() {
        return wheelSpinVelocity_;
      }
      /**
       * <code>optional float wheelSpinVelocity = 18;</code>
       */
      public Builder setWheelSpinVelocity(float value) {
        bitField0_ |= 0x00020000;
        wheelSpinVelocity_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float wheelSpinVelocity = 18;</code>
       */
      public Builder clearWheelSpinVelocity() {
        bitField0_ = (bitField0_ & ~0x00020000);
        wheelSpinVelocity_ = 0F;
        onChanged();
        return this;
      }

      private float z_ ;
      /**
       * <code>optional float z = 19;</code>
       */
      public boolean hasZ() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional float z = 19;</code>
       */
      public float getZ() {
        return z_;
      }
      /**
       * <code>optional float z = 19;</code>
       */
      public Builder setZ(float value) {
        bitField0_ |= 0x00040000;
        z_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float z = 19;</code>
       */
      public Builder clearZ() {
        bitField0_ = (bitField0_ & ~0x00040000);
        z_ = 0F;
        onChanged();
        return this;
      }

      private float focus_ ;
      /**
       * <code>optional float focus = 20;</code>
       */
      public boolean hasFocus() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional float focus = 20;</code>
       */
      public float getFocus() {
        return focus_;
      }
      /**
       * <code>optional float focus = 20;</code>
       */
      public Builder setFocus(float value) {
        bitField0_ |= 0x00080000;
        focus_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float focus = 20;</code>
       */
      public Builder clearFocus() {
        bitField0_ = (bitField0_ & ~0x00080000);
        focus_ = 0F;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:TORCS_Sensors.Sensors)
    }

    // @@protoc_insertion_point(class_scope:TORCS_Sensors.Sensors)
    private static final TORCS_Sensors.Sensor_Message.Sensors DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new TORCS_Sensors.Sensor_Message.Sensors();
    }

    public static TORCS_Sensors.Sensor_Message.Sensors getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<Sensors>
        PARSER = new com.google.protobuf.AbstractParser<Sensors>() {
      @java.lang.Override
      public Sensors parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Sensors(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Sensors> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Sensors> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public TORCS_Sensors.Sensor_Message.Sensors getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_TORCS_Sensors_Sensors_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_TORCS_Sensors_Sensors_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\022proto_schema.proto\022\rTORCS_Sensors\"\377\002\n\007" +
      "Sensors\022\r\n\005angle\030\001 \001(\002\022\026\n\016currentLabTime" +
      "\030\002 \001(\002\022\016\n\006damage\030\003 \001(\002\022\031\n\021distanceFromSt" +
      "art\030\004 \001(\002\022\036\n\026totalDistanceFromStart\030\005 \001(" +
      "\002\022\025\n\rdistanceRaced\030\006 \001(\002\022\014\n\004fuel\030\007 \001(\002\022\014" +
      "\n\004gear\030\010 \001(\002\022\023\n\013lastLapTime\030\t \001(\002\022\021\n\topp" +
      "onents\030\n \001(\002\022\017\n\007racePos\030\013 \001(\002\022\013\n\003rpm\030\014 \001" +
      "(\002\022\016\n\006speedX\030\r \001(\002\022\016\n\006speedY\030\016 \001(\002\022\016\n\006sp" +
      "eedZ\030\017 \001(\002\022\r\n\005track\030\020 \001(\002\022\025\n\rtrackPositi" +
      "on\030\021 \001(\002\022\031\n\021wheelSpinVelocity\030\022 \001(\002\022\t\n\001z" +
      "\030\023 \001(\002\022\r\n\005focus\030\024 \001(\002B\020B\016Sensor_Message"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_TORCS_Sensors_Sensors_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_TORCS_Sensors_Sensors_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_TORCS_Sensors_Sensors_descriptor,
        new java.lang.String[] { "Angle", "CurrentLabTime", "Damage", "DistanceFromStart", "TotalDistanceFromStart", "DistanceRaced", "Fuel", "Gear", "LastLapTime", "Opponents", "RacePos", "Rpm", "SpeedX", "SpeedY", "SpeedZ", "Track", "TrackPosition", "WheelSpinVelocity", "Z", "Focus", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
